{"version":3,"file":"index.min.js","sources":["../src/OpenVpnController.ts","../src/helpers/getOpenVpnBin.ts","../src/helpers/countryCode.ts","../src/helpers/fixConfigCompressionError.ts","../src/ProtonVpnController.ts"],"sourcesContent":["import { existsSync, lstatSync } from \"fs\";\nimport { getOpenVpnBin } from \"./helpers/getOpenVpnBin\";\nimport { spawn } from \"child_process\";\n\nexport interface OpenVpnAuth {\n    user: string;\n    pass: string;\n}\n\nexport default class OpenVpnController {\n    private openVpnBin: string;\n    private openVpnProcess: ReturnType<typeof spawn> | null = null;\n    private openVpnLog: string[] = [];\n    private config: string;\n\n    private status: \"connected\" | \"connecting\" | \"disconnected\" =\n        \"disconnected\";\n\n    private enabledLogging: boolean;\n\n    constructor(openVpnBin?: string, enableLogging = false) {\n        this.openVpnBin = openVpnBin ?? getOpenVpnBin();\n        this.enabledLogging = enableLogging;\n    }\n\n    /**\n     * Connects to the VPN using the specified config file.\n     *\n     * @param configPath Full path to the .ovpn config file.\n     */\n    connect(configPath: string, auth?: OpenVpnAuth) {\n        if (!existsSync(configPath)) throw new Error(\"Config file not found.\");\n\n        if (lstatSync(configPath).isDirectory())\n            throw new Error(\"Config file cannot be a directory.\");\n\n        if (!configPath.endsWith(\".ovpn\"))\n            throw new Error(\"Config file must be an .ovpn file.\");\n\n        if (this.openVpnProcess) throw new Error(\"Already connected.\");\n\n        this.config = configPath;\n        this.openVpnProcess = spawn(this.openVpnBin, [\"--config\", configPath]);\n\n        this.status = \"connecting\";\n\n        return new Promise<void>((resolve, reject) => {\n            let skipPostAuthError = false;\n\n            this.openVpnProcess.stderr.on(\"data\", (err) => {\n                const s = new String(err.toString());\n\n                // handle auth\n                // for some reason, the auth prompt is sent to stderr\n                if (s.includes(\"Enter Auth Username:\")) {\n                    if (!auth)\n                        throw new Error(\"Auth required but not provided.\");\n\n                    if (this.enabledLogging)\n                        console.log(\"Enter Auth Username: \" + auth.user);\n\n                    this.openVpnProcess.stdin.write(`${auth.user}\\n`);\n                    return;\n                } else if (s.includes(\"Enter Auth Password:\")) {\n                    if (!auth)\n                        throw new Error(\"Auth required but not provided.\");\n\n                    if (this.enabledLogging)\n                        console.log(\n                            \"Enter Auth Password: \" +\n                                auth.pass.replace(/./g, \"*\"),\n                        );\n\n                    this.openVpnProcess.stdin.write(`${auth.pass}\\n`);\n                    skipPostAuthError = true;\n                    return;\n                } else if (skipPostAuthError) {\n                    // skip the error that occurs after auth\n                    // this error consists of purely whitespace\n                    // so only skip if the string is empty after trimming\n                    skipPostAuthError = false;\n                    if (s.trim() === \"\") return;\n                }\n\n                console.error(\"Error: \", s);\n                this.disconnect();\n\n                reject(s);\n            });\n\n            this.openVpnProcess.on(\"exit\", (code, signal) => {\n                const errorMsg = `OpenVPN process exited with code ${code} and signal ${signal} before connection could be established.`;\n                console.error(errorMsg);\n                this.disconnect();\n\n                reject(new Error(errorMsg));\n            });\n\n            this.openVpnProcess.stdout.on(\"data\", (msg) => {\n                const msgStr = msg.toString();\n                this.openVpnLog.push(msgStr);\n\n                if (this.enabledLogging) console.log(msgStr);\n\n                if (\n                    msgStr\n                        .toLowerCase()\n                        .includes(\"initialization sequence completed\")\n                ) {\n                    this.status = \"connected\";\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Disconnects from the VPN.\n     */\n    disconnect() {\n        if (this.openVpnProcess) {\n            const killed = this.openVpnProcess.kill();\n            if (!killed) throw new Error(\"Failed to kill OpenVPN process.\");\n\n            this.openVpnProcess = null;\n\n            this.config = \"\";\n            this.status = \"disconnected\";\n        } else {\n            throw new Error(\"Not connected.\");\n        }\n    }\n\n    /**\n     * Gets the log of the OpenVPN process.\n     *\n     * @returns A copy of the log.\n     */\n    getLog() {\n        return [...this.openVpnLog];\n    }\n\n    /**\n     * Clears the currently stored log.\n     */\n    clearLog() {\n        this.openVpnLog = [];\n    }\n\n    /**\n     * Gets the path to the config being used.\n     *\n     * @returns The path to the config being used.\n     */\n    getConfig() {\n        return this.config;\n    }\n\n    /**\n     * Gets the controller's current status.\n     *\n     * @returns The controller's current status.\n     */\n    getStatus() {\n        return this.status;\n    }\n}\n","import * as commandExists from \"command-exists\";\nimport { existsSync } from \"fs\";\n\nexport function getOpenVpnBin(): string {\n    switch (process.platform) {\n        case \"win32\":\n            if (existsSync(\"C:\\\\Program Files\\\\OpenVPN\\\\bin\\\\openvpn.exe\")) {\n                return \"C:\\\\Program Files\\\\OpenVPN\\\\bin\\\\openvpn.exe\";\n            } else if (\n                existsSync(\"C:\\\\Program Files (x86)\\\\OpenVPN\\\\bin\\\\openvpn.exe\")\n            ) {\n                return \"C:\\\\Program Files (x86)\\\\OpenVPN\\\\bin\\\\openvpn.exe\";\n            } else {\n                throw new Error(\"OpenVPN binary not found.\");\n            }\n        default:\n            if (commandExists.sync(\"openvpn\")) return \"openvpn\";\n            else throw new Error(\"OpenVPN binary not found.\");\n    }\n}\n","export const countryCodes = [\n    \"AE\",\n    \"AR\",\n    \"AT\",\n    \"AU\",\n    \"BE\",\n    \"BG\",\n    \"BR\",\n    \"CA\",\n    \"CH\",\n    \"CL\",\n    \"CO\",\n    \"CR\",\n    \"CY\",\n    \"CZ\",\n    \"DE\",\n    \"DK\",\n    \"EC\",\n    \"EE\",\n    \"EG\",\n    \"ES\",\n    \"FI\",\n    \"FR\",\n    \"GE\",\n    \"GR\",\n    \"HK\",\n    \"HR\",\n    \"HU\",\n    \"IE\",\n    \"IL\",\n    \"IN\",\n    \"IS\",\n    \"IT\",\n    \"JP\",\n    \"KH\",\n    \"KR\",\n    \"LT\",\n    \"LU\",\n    \"LV\",\n    \"MD\",\n    \"MK\",\n    \"MM\",\n    \"MT\",\n    \"MX\",\n    \"MY\",\n    \"NG\",\n    \"NL\",\n    \"NO\",\n    \"NZ\",\n    \"PE\",\n    \"PH\",\n    \"PL\",\n    \"PR\",\n    \"PT\",\n    \"RO\",\n    \"RS\",\n    \"RU\",\n    \"SE\",\n    \"SG\",\n    \"SI\",\n    \"SK\",\n    \"TH\",\n    \"TR\",\n    \"TW\",\n    \"UA\",\n    \"UK\",\n    \"US\",\n    \"VN\",\n    \"ZA\",\n] as const;\n\nexport type CountryCode = (typeof countryCodes)[number];\n","import {\n    existsSync,\n    lstatSync,\n    readFileSync,\n    readdirSync,\n    writeFileSync,\n} from \"fs\";\nimport { resolve } from \"path\";\n\nexport function fixConfigCompressionError(configPath: string) {\n    if (!existsSync(configPath)) throw new Error(\"Config file not found.\");\n    if (lstatSync(configPath).isDirectory())\n        throw new Error(\"Config file cannot be a directory.\");\n    if (!configPath.endsWith(\".ovpn\"))\n        throw new Error(\"Config file must be an .ovpn file.\");\n\n    let f = readFileSync(configPath, \"utf-8\");\n    f = f.replace(\n        \"fast-io\",\n        `fast-io\\n\\n${!f.includes(\"comp-lzo\") ? \"comp-lzo yes\" : \"\"}\\n${\n            !f.includes(\"allow-compression\") ? \"allow-compression yes\" : \"\"\n        }`,\n    );\n\n    if (!f.includes(\"block-outside-dns\"))\n        f = f.replace(\"fast-io\", \"fast-io\\nblock-outside-dns\");\n\n    writeFileSync(configPath, f);\n}\n\nexport function fixConfigCompressionErrorDir(dir: string) {\n    if (!existsSync(dir)) throw new Error(\"Config directory not found.\");\n    if (!lstatSync(dir).isDirectory())\n        throw new Error(\"Config directory must be a directory.\");\n\n    const files = readdirSync(dir);\n    for (const file of files) {\n        fixConfigCompressionError(resolve(dir, file));\n    }\n}\n","import { existsSync, lstatSync, readdirSync } from \"fs\";\nimport OpenVpnController, { OpenVpnAuth } from \"./OpenVpnController\";\nimport { CountryCode, countryCodes } from \"./helpers/countryCode\";\nimport { resolve } from \"path\";\n\nexport default class ProtonVpnController {\n    private configDir: string;\n    private configs = new Map<CountryCode, string>();\n\n    private openVpnController: OpenVpnController;\n    private auth: OpenVpnAuth;\n\n    constructor(\n        configDir: string,\n        auth: OpenVpnAuth,\n        openVpnOptions?: { openVpnBin?: string; enableLogging?: boolean },\n    ) {\n        this.configDir = this.validateConfigDir(configDir);\n        this.configs = this.getCountryConfigs(configDir);\n\n        this.auth = auth;\n        this.openVpnController = new OpenVpnController(\n            openVpnOptions?.openVpnBin,\n            openVpnOptions?.enableLogging,\n        );\n    }\n\n    connect(country: CountryCode | \"random\") {\n        if (country === \"random\") {\n            country =\n                countryCodes[Math.floor(Math.random() * countryCodes.length)];\n        }\n\n        if (!this.configs.has(country)) throw new Error(\"Config not found.\");\n\n        return this.openVpnController.connect(\n            this.configs.get(country)!,\n            this.auth,\n        );\n    }\n\n    disconnect() {\n        return this.openVpnController.disconnect();\n    }\n\n    getStatus() {\n        return this.openVpnController.getStatus();\n    }\n\n    private validateConfigDir(dir: string) {\n        if (!existsSync(dir)) throw new Error(\"Config directory not found.\");\n\n        if (!lstatSync(dir).isDirectory())\n            throw new Error(\"Config directory must be a directory.\");\n\n        const files = readdirSync(dir);\n        if (files.length === 0) throw new Error(\"Config directory is empty.\");\n\n        for (const file of files) {\n            if (!file.endsWith(\".ovpn\"))\n                throw new Error(\"Config directory contains non .ovpn files.\");\n        }\n\n        return dir;\n    }\n\n    private getCountryConfigs(dir: string): Map<CountryCode, string> {\n        const configs = new Map<CountryCode, string>();\n\n        const files = readdirSync(dir);\n\n        countryCodes.forEach((countryCode) => {\n            const config = files.find((f) =>\n                f.startsWith(countryCode.toLowerCase()),\n            );\n            if (!config)\n                throw new Error(`Config for ${countryCode} not found.`);\n\n            configs.set(countryCode, resolve(dir, config));\n        });\n\n        return configs;\n    }\n}\n"],"names":["OpenVpnController","constructor","openVpnBin","enableLogging","this","openVpnProcess","openVpnLog","status","process","platform","existsSync","Error","commandExists.sync","getOpenVpnBin","enabledLogging","connect","configPath","auth","lstatSync","isDirectory","endsWith","config","spawn","Promise","resolve","reject","skipPostAuthError","stderr","on","err","s","String","toString","includes","console","log","user","stdin","write","pass","replace","trim","error","disconnect","code","signal","errorMsg","stdout","msg","msgStr","push","toLowerCase","kill","getLog","clearLog","getConfig","getStatus","countryCodes","fixConfigCompressionError","f","readFileSync","writeFileSync","configDir","openVpnOptions","configs","Map","validateConfigDir","getCountryConfigs","openVpnController","country","Math","floor","random","length","has","get","dir","files","readdirSync","file","forEach","countryCode","find","startsWith","set"],"mappings":"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"}