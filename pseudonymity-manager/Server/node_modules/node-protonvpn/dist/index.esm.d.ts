interface OpenVpnAuth {
    user: string;
    pass: string;
}
declare class OpenVpnController {
    private openVpnBin;
    private openVpnProcess;
    private openVpnLog;
    private config;
    private status;
    private enabledLogging;
    constructor(openVpnBin?: string, enableLogging?: boolean);
    /**
     * Connects to the VPN using the specified config file.
     *
     * @param configPath Full path to the .ovpn config file.
     */
    connect(configPath: string, auth?: OpenVpnAuth): Promise<void>;
    /**
     * Disconnects from the VPN.
     */
    disconnect(): void;
    /**
     * Gets the log of the OpenVPN process.
     *
     * @returns A copy of the log.
     */
    getLog(): string[];
    /**
     * Clears the currently stored log.
     */
    clearLog(): void;
    /**
     * Gets the path to the config being used.
     *
     * @returns The path to the config being used.
     */
    getConfig(): string;
    /**
     * Gets the controller's current status.
     *
     * @returns The controller's current status.
     */
    getStatus(): "connected" | "connecting" | "disconnected";
}
declare const countryCodes: readonly [
    "AE",
    "AR",
    "AT",
    "AU",
    "BE",
    "BG",
    "BR",
    "CA",
    "CH",
    "CL",
    "CO",
    "CR",
    "CY",
    "CZ",
    "DE",
    "DK",
    "EC",
    "EE",
    "EG",
    "ES",
    "FI",
    "FR",
    "GE",
    "GR",
    "HK",
    "HR",
    "HU",
    "IE",
    "IL",
    "IN",
    "IS",
    "IT",
    "JP",
    "KH",
    "KR",
    "LT",
    "LU",
    "LV",
    "MD",
    "MK",
    "MM",
    "MT",
    "MX",
    "MY",
    "NG",
    "NL",
    "NO",
    "NZ",
    "PE",
    "PH",
    "PL",
    "PR",
    "PT",
    "RO",
    "RS",
    "RU",
    "SE",
    "SG",
    "SI",
    "SK",
    "TH",
    "TR",
    "TW",
    "UA",
    "UK",
    "US",
    "VN",
    "ZA"
];
type CountryCode = (typeof countryCodes)[number];
declare class ProtonVpnController {
    private configDir;
    private configs;
    private openVpnController;
    private auth;
    constructor(configDir: string, auth: OpenVpnAuth, openVpnOptions?: {
        openVpnBin?: string;
        enableLogging?: boolean;
    });
    connect(country: CountryCode | "random"): Promise<void>;
    disconnect(): void;
    getStatus(): "connected" | "connecting" | "disconnected";
    private validateConfigDir;
    private getCountryConfigs;
}
declare function fixConfigCompressionError(configPath: string): void;
declare function fixConfigCompressionErrorDir(dir: string): void;
export { ProtonVpnController, OpenVpnController, OpenVpnAuth, fixConfigCompressionError, fixConfigCompressionErrorDir };
