var MyLib=function(n,e,o,r){"use strict";var t={exports:{}},i=o.exec,s=o.execSync,c=e,u=r,f=c.access,l=c.accessSync,a=c.constants||c,p="win32"==process.platform,h=function(n,e,o){!function(n,e){f(n,a.F_OK,(function(n){e(!n)}))}(n,(function(r){r?function(n,e){f(n,a.F_OK|a.X_OK,(function(n){e(null,!n)}))}(n,o):i("command -v "+e+" 2>/dev/null && { echo >&1 "+e+"; exit 0; }",(function(n,e,r){o(null,!!e)}))}))},d=function(n,e){if(function(n){try{return l(n,a.F_OK),!1}catch(n){return!0}}(n))try{return!!s("command -v "+e+" 2>/dev/null && { echo >&1 "+e+"; exit 0; }")}catch(n){return!1}return function(n){try{return l(n,a.F_OK|a.X_OK),!0}catch(n){return!1}}(n)},g=function(n){return/[^A-Za-z0-9_\/:=-]/.test(n)&&(n=(n="'"+n.replace(/'/g,"'\\''")+"'").replace(/^(?:'')+/g,"").replace(/\\'''/g,"\\'")),n};p&&(g=function(n){return/[\\]/.test(n)?'"'+u.dirname(n)+'"'+":"+('"'+u.basename(n)+'"'):'"'+n+'"'}),t.exports=function n(e,o){var r=g(e);if(!o&&"undefined"!=typeof Promise)return new Promise((function(o,r){n(e,(function(n,t){t?o(e):r(n)}))}));p?function(n,e,o){/^(?!(?:.*\s|.*\.|\W+)$)(?:[a-zA-Z]:)?(?:(?:[^<>:"\|\?\*\n])+(?:\/\/|\/|\\\\|\\)?)+$/m.test(n)?i("where "+e,(function(n){o(null,null===n)})):o(null,!1)}(e,r,o):h(e,r,o)},t.exports.sync=function(n){var e=g(n);return p?function(n,e,o){if(!/^(?!(?:.*\s|.*\.|\W+)$)(?:[a-zA-Z]:)?(?:(?:[^<>:"\|\?\*\n])+(?:\/\/|\/|\\\\|\\)?)+$/m.test(n))return!1;try{return!!s("where "+e,{stdio:[]})}catch(n){return!1}}(n,e):d(n,e)};var w=t.exports;class y{constructor(n,o=!1){this.openVpnProcess=null,this.openVpnLog=[],this.status="disconnected",this.openVpnBin=null!=n?n:function(){if("win32"===process.platform){if(e.existsSync("C:\\Program Files\\OpenVPN\\bin\\openvpn.exe"))return"C:\\Program Files\\OpenVPN\\bin\\openvpn.exe";if(e.existsSync("C:\\Program Files (x86)\\OpenVPN\\bin\\openvpn.exe"))return"C:\\Program Files (x86)\\OpenVPN\\bin\\openvpn.exe";throw new Error("OpenVPN binary not found.")}if(w.sync("openvpn"))return"openvpn";throw new Error("OpenVPN binary not found.")}(),this.enabledLogging=o}connect(n,r){if(!e.existsSync(n))throw new Error("Config file not found.");if(e.lstatSync(n).isDirectory())throw new Error("Config file cannot be a directory.");if(!n.endsWith(".ovpn"))throw new Error("Config file must be an .ovpn file.");if(this.openVpnProcess)throw new Error("Already connected.");return this.config=n,this.openVpnProcess=o.spawn(this.openVpnBin,["--config",n]),this.status="connecting",new Promise(((n,e)=>{let o=!1;this.openVpnProcess.stderr.on("data",(n=>{const t=new String(n.toString());if(t.includes("Enter Auth Username:")){if(!r)throw new Error("Auth required but not provided.");return this.enabledLogging&&console.log("Enter Auth Username: "+r.user),void this.openVpnProcess.stdin.write(`${r.user}\n`)}if(t.includes("Enter Auth Password:")){if(!r)throw new Error("Auth required but not provided.");return this.enabledLogging&&console.log("Enter Auth Password: "+r.pass.replace(/./g,"*")),this.openVpnProcess.stdin.write(`${r.pass}\n`),void(o=!0)}o&&(o=!1,""===t.trim())||(console.error("Error: ",t),this.disconnect(),e(t))})),this.openVpnProcess.on("exit",((n,o)=>{const r=`OpenVPN process exited with code ${n} and signal ${o} before connection could be established.`;console.error(r),this.disconnect(),e(new Error(r))})),this.openVpnProcess.stdout.on("data",(e=>{const o=e.toString();this.openVpnLog.push(o),this.enabledLogging&&console.log(o),o.toLowerCase().includes("initialization sequence completed")&&(this.status="connected",n())}))}))}disconnect(){if(!this.openVpnProcess)throw new Error("Not connected.");if(!this.openVpnProcess.kill())throw new Error("Failed to kill OpenVPN process.");this.openVpnProcess=null,this.config="",this.status="disconnected"}getLog(){return[...this.openVpnLog]}clearLog(){this.openVpnLog=[]}getConfig(){return this.config}getStatus(){return this.status}}const C=["AE","AR","AT","AU","BE","BG","BR","CA","CH","CL","CO","CR","CY","CZ","DE","DK","EC","EE","EG","ES","FI","FR","GE","GR","HK","HR","HU","IE","IL","IN","IS","IT","JP","KH","KR","LT","LU","LV","MD","MK","MM","MT","MX","MY","NG","NL","NO","NZ","PE","PH","PL","PR","PT","RO","RS","RU","SE","SG","SI","SK","TH","TR","TW","UA","UK","US","VN","ZA"];function E(n){if(!e.existsSync(n))throw new Error("Config file not found.");if(e.lstatSync(n).isDirectory())throw new Error("Config file cannot be a directory.");if(!n.endsWith(".ovpn"))throw new Error("Config file must be an .ovpn file.");let o=e.readFileSync(n,"utf-8");o=o.replace("fast-io",`fast-io\n\n${o.includes("comp-lzo")?"":"comp-lzo yes"}\n${o.includes("allow-compression")?"":"allow-compression yes"}`),o.includes("block-outside-dns")||(o=o.replace("fast-io","fast-io\nblock-outside-dns")),e.writeFileSync(n,o)}return n.OpenVpnController=y,n.ProtonVpnController=class{constructor(n,e,o){this.configs=new Map,this.configDir=this.validateConfigDir(n),this.configs=this.getCountryConfigs(n),this.auth=e,this.openVpnController=new y(null==o?void 0:o.openVpnBin,null==o?void 0:o.enableLogging)}connect(n){if("random"===n&&(n=C[Math.floor(Math.random()*C.length)]),!this.configs.has(n))throw new Error("Config not found.");return this.openVpnController.connect(this.configs.get(n),this.auth)}disconnect(){return this.openVpnController.disconnect()}getStatus(){return this.openVpnController.getStatus()}validateConfigDir(n){if(!e.existsSync(n))throw new Error("Config directory not found.");if(!e.lstatSync(n).isDirectory())throw new Error("Config directory must be a directory.");const o=e.readdirSync(n);if(0===o.length)throw new Error("Config directory is empty.");for(const n of o)if(!n.endsWith(".ovpn"))throw new Error("Config directory contains non .ovpn files.");return n}getCountryConfigs(n){const o=new Map,t=e.readdirSync(n);return C.forEach((e=>{const i=t.find((n=>n.startsWith(e.toLowerCase())));if(!i)throw new Error(`Config for ${e} not found.`);o.set(e,r.resolve(n,i))})),o}},n.fixConfigCompressionError=E,n.fixConfigCompressionErrorDir=function(n){if(!e.existsSync(n))throw new Error("Config directory not found.");if(!e.lstatSync(n).isDirectory())throw new Error("Config directory must be a directory.");const o=e.readdirSync(n);for(const e of o)E(r.resolve(n,e))},n}({},require$$1,require$$0,require$$2);
//# sourceMappingURL=index.min.js.map
