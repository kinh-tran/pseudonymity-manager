{"version":3,"file":"index.esm.js","sources":["../src/helpers/getOpenVpnBin.ts","../src/OpenVpnController.ts","../src/helpers/countryCode.ts","../src/ProtonVpnController.ts","../src/helpers/fixConfigCompressionError.ts"],"sourcesContent":["import * as commandExists from \"command-exists\";\nimport { existsSync } from \"fs\";\n\nexport function getOpenVpnBin(): string {\n    switch (process.platform) {\n        case \"win32\":\n            if (existsSync(\"C:\\\\Program Files\\\\OpenVPN\\\\bin\\\\openvpn.exe\")) {\n                return \"C:\\\\Program Files\\\\OpenVPN\\\\bin\\\\openvpn.exe\";\n            } else if (\n                existsSync(\"C:\\\\Program Files (x86)\\\\OpenVPN\\\\bin\\\\openvpn.exe\")\n            ) {\n                return \"C:\\\\Program Files (x86)\\\\OpenVPN\\\\bin\\\\openvpn.exe\";\n            } else {\n                throw new Error(\"OpenVPN binary not found.\");\n            }\n        default:\n            if (commandExists.sync(\"openvpn\")) return \"openvpn\";\n            else throw new Error(\"OpenVPN binary not found.\");\n    }\n}\n","import { existsSync, lstatSync } from \"fs\";\nimport { getOpenVpnBin } from \"./helpers/getOpenVpnBin\";\nimport { spawn } from \"child_process\";\n\nexport interface OpenVpnAuth {\n    user: string;\n    pass: string;\n}\n\nexport default class OpenVpnController {\n    private openVpnBin: string;\n    private openVpnProcess: ReturnType<typeof spawn> | null = null;\n    private openVpnLog: string[] = [];\n    private config: string;\n\n    private status: \"connected\" | \"connecting\" | \"disconnected\" =\n        \"disconnected\";\n\n    private enabledLogging: boolean;\n\n    constructor(openVpnBin?: string, enableLogging = false) {\n        this.openVpnBin = openVpnBin ?? getOpenVpnBin();\n        this.enabledLogging = enableLogging;\n    }\n\n    /**\n     * Connects to the VPN using the specified config file.\n     *\n     * @param configPath Full path to the .ovpn config file.\n     */\n    connect(configPath: string, auth?: OpenVpnAuth) {\n        if (!existsSync(configPath)) throw new Error(\"Config file not found.\");\n\n        if (lstatSync(configPath).isDirectory())\n            throw new Error(\"Config file cannot be a directory.\");\n\n        if (!configPath.endsWith(\".ovpn\"))\n            throw new Error(\"Config file must be an .ovpn file.\");\n\n        if (this.openVpnProcess) throw new Error(\"Already connected.\");\n\n        this.config = configPath;\n        this.openVpnProcess = spawn(this.openVpnBin, [\"--config\", configPath]);\n\n        this.status = \"connecting\";\n\n        return new Promise<void>((resolve, reject) => {\n            let skipPostAuthError = false;\n\n            this.openVpnProcess.stderr.on(\"data\", (err) => {\n                const s = new String(err.toString());\n\n                // handle auth\n                // for some reason, the auth prompt is sent to stderr\n                if (s.includes(\"Enter Auth Username:\")) {\n                    if (!auth)\n                        throw new Error(\"Auth required but not provided.\");\n\n                    if (this.enabledLogging)\n                        console.log(\"Enter Auth Username: \" + auth.user);\n\n                    this.openVpnProcess.stdin.write(`${auth.user}\\n`);\n                    return;\n                } else if (s.includes(\"Enter Auth Password:\")) {\n                    if (!auth)\n                        throw new Error(\"Auth required but not provided.\");\n\n                    if (this.enabledLogging)\n                        console.log(\n                            \"Enter Auth Password: \" +\n                                auth.pass.replace(/./g, \"*\"),\n                        );\n\n                    this.openVpnProcess.stdin.write(`${auth.pass}\\n`);\n                    skipPostAuthError = true;\n                    return;\n                } else if (skipPostAuthError) {\n                    // skip the error that occurs after auth\n                    // this error consists of purely whitespace\n                    // so only skip if the string is empty after trimming\n                    skipPostAuthError = false;\n                    if (s.trim() === \"\") return;\n                }\n\n                console.error(\"Error: \", s);\n                this.disconnect();\n\n                reject(s);\n            });\n\n            this.openVpnProcess.on(\"exit\", (code, signal) => {\n                const errorMsg = `OpenVPN process exited with code ${code} and signal ${signal} before connection could be established.`;\n                console.error(errorMsg);\n                this.disconnect();\n\n                reject(new Error(errorMsg));\n            });\n\n            this.openVpnProcess.stdout.on(\"data\", (msg) => {\n                const msgStr = msg.toString();\n                this.openVpnLog.push(msgStr);\n\n                if (this.enabledLogging) console.log(msgStr);\n\n                if (\n                    msgStr\n                        .toLowerCase()\n                        .includes(\"initialization sequence completed\")\n                ) {\n                    this.status = \"connected\";\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Disconnects from the VPN.\n     */\n    disconnect() {\n        if (this.openVpnProcess) {\n            const killed = this.openVpnProcess.kill();\n            if (!killed) throw new Error(\"Failed to kill OpenVPN process.\");\n\n            this.openVpnProcess = null;\n\n            this.config = \"\";\n            this.status = \"disconnected\";\n        } else {\n            throw new Error(\"Not connected.\");\n        }\n    }\n\n    /**\n     * Gets the log of the OpenVPN process.\n     *\n     * @returns A copy of the log.\n     */\n    getLog() {\n        return [...this.openVpnLog];\n    }\n\n    /**\n     * Clears the currently stored log.\n     */\n    clearLog() {\n        this.openVpnLog = [];\n    }\n\n    /**\n     * Gets the path to the config being used.\n     *\n     * @returns The path to the config being used.\n     */\n    getConfig() {\n        return this.config;\n    }\n\n    /**\n     * Gets the controller's current status.\n     *\n     * @returns The controller's current status.\n     */\n    getStatus() {\n        return this.status;\n    }\n}\n","export const countryCodes = [\n    \"AE\",\n    \"AR\",\n    \"AT\",\n    \"AU\",\n    \"BE\",\n    \"BG\",\n    \"BR\",\n    \"CA\",\n    \"CH\",\n    \"CL\",\n    \"CO\",\n    \"CR\",\n    \"CY\",\n    \"CZ\",\n    \"DE\",\n    \"DK\",\n    \"EC\",\n    \"EE\",\n    \"EG\",\n    \"ES\",\n    \"FI\",\n    \"FR\",\n    \"GE\",\n    \"GR\",\n    \"HK\",\n    \"HR\",\n    \"HU\",\n    \"IE\",\n    \"IL\",\n    \"IN\",\n    \"IS\",\n    \"IT\",\n    \"JP\",\n    \"KH\",\n    \"KR\",\n    \"LT\",\n    \"LU\",\n    \"LV\",\n    \"MD\",\n    \"MK\",\n    \"MM\",\n    \"MT\",\n    \"MX\",\n    \"MY\",\n    \"NG\",\n    \"NL\",\n    \"NO\",\n    \"NZ\",\n    \"PE\",\n    \"PH\",\n    \"PL\",\n    \"PR\",\n    \"PT\",\n    \"RO\",\n    \"RS\",\n    \"RU\",\n    \"SE\",\n    \"SG\",\n    \"SI\",\n    \"SK\",\n    \"TH\",\n    \"TR\",\n    \"TW\",\n    \"UA\",\n    \"UK\",\n    \"US\",\n    \"VN\",\n    \"ZA\",\n] as const;\n\nexport type CountryCode = (typeof countryCodes)[number];\n","import { existsSync, lstatSync, readdirSync } from \"fs\";\nimport OpenVpnController, { OpenVpnAuth } from \"./OpenVpnController\";\nimport { CountryCode, countryCodes } from \"./helpers/countryCode\";\nimport { resolve } from \"path\";\n\nexport default class ProtonVpnController {\n    private configDir: string;\n    private configs = new Map<CountryCode, string>();\n\n    private openVpnController: OpenVpnController;\n    private auth: OpenVpnAuth;\n\n    constructor(\n        configDir: string,\n        auth: OpenVpnAuth,\n        openVpnOptions?: { openVpnBin?: string; enableLogging?: boolean },\n    ) {\n        this.configDir = this.validateConfigDir(configDir);\n        this.configs = this.getCountryConfigs(configDir);\n\n        this.auth = auth;\n        this.openVpnController = new OpenVpnController(\n            openVpnOptions?.openVpnBin,\n            openVpnOptions?.enableLogging,\n        );\n    }\n\n    connect(country: CountryCode | \"random\") {\n        if (country === \"random\") {\n            country =\n                countryCodes[Math.floor(Math.random() * countryCodes.length)];\n        }\n\n        if (!this.configs.has(country)) throw new Error(\"Config not found.\");\n\n        return this.openVpnController.connect(\n            this.configs.get(country)!,\n            this.auth,\n        );\n    }\n\n    disconnect() {\n        return this.openVpnController.disconnect();\n    }\n\n    getStatus() {\n        return this.openVpnController.getStatus();\n    }\n\n    private validateConfigDir(dir: string) {\n        if (!existsSync(dir)) throw new Error(\"Config directory not found.\");\n\n        if (!lstatSync(dir).isDirectory())\n            throw new Error(\"Config directory must be a directory.\");\n\n        const files = readdirSync(dir);\n        if (files.length === 0) throw new Error(\"Config directory is empty.\");\n\n        for (const file of files) {\n            if (!file.endsWith(\".ovpn\"))\n                throw new Error(\"Config directory contains non .ovpn files.\");\n        }\n\n        return dir;\n    }\n\n    private getCountryConfigs(dir: string): Map<CountryCode, string> {\n        const configs = new Map<CountryCode, string>();\n\n        const files = readdirSync(dir);\n\n        countryCodes.forEach((countryCode) => {\n            const config = files.find((f) =>\n                f.startsWith(countryCode.toLowerCase()),\n            );\n            if (!config)\n                throw new Error(`Config for ${countryCode} not found.`);\n\n            configs.set(countryCode, resolve(dir, config));\n        });\n\n        return configs;\n    }\n}\n","import {\n    existsSync,\n    lstatSync,\n    readFileSync,\n    readdirSync,\n    writeFileSync,\n} from \"fs\";\nimport { resolve } from \"path\";\n\nexport function fixConfigCompressionError(configPath: string) {\n    if (!existsSync(configPath)) throw new Error(\"Config file not found.\");\n    if (lstatSync(configPath).isDirectory())\n        throw new Error(\"Config file cannot be a directory.\");\n    if (!configPath.endsWith(\".ovpn\"))\n        throw new Error(\"Config file must be an .ovpn file.\");\n\n    let f = readFileSync(configPath, \"utf-8\");\n    f = f.replace(\n        \"fast-io\",\n        `fast-io\\n\\n${!f.includes(\"comp-lzo\") ? \"comp-lzo yes\" : \"\"}\\n${\n            !f.includes(\"allow-compression\") ? \"allow-compression yes\" : \"\"\n        }`,\n    );\n\n    if (!f.includes(\"block-outside-dns\"))\n        f = f.replace(\"fast-io\", \"fast-io\\nblock-outside-dns\");\n\n    writeFileSync(configPath, f);\n}\n\nexport function fixConfigCompressionErrorDir(dir: string) {\n    if (!existsSync(dir)) throw new Error(\"Config directory not found.\");\n    if (!lstatSync(dir).isDirectory())\n        throw new Error(\"Config directory must be a directory.\");\n\n    const files = readdirSync(dir);\n    for (const file of files) {\n        fixConfigCompressionError(resolve(dir, file));\n    }\n}\n"],"names":["commandExists.sync"],"mappings":"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"}